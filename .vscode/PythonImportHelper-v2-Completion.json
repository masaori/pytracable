[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "jmespath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jmespath",
        "description": "jmespath",
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "jmespath",
        "description": "jmespath",
        "isExtraImport": true,
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "asdict",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "YTMusic",
        "importPath": "ytmusicapi",
        "description": "ytmusicapi",
        "isExtraImport": true,
        "detail": "ytmusicapi",
        "documentation": {}
    },
    {
        "label": "essentia.standard",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "essentia.standard",
        "description": "essentia.standard",
        "detail": "essentia.standard",
        "documentation": {}
    },
    {
        "label": "librosa",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "librosa",
        "description": "librosa",
        "detail": "librosa",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "soundfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "soundfile",
        "description": "soundfile",
        "detail": "soundfile",
        "documentation": {}
    },
    {
        "label": "pychorus",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pychorus",
        "description": "pychorus",
        "detail": "pychorus",
        "documentation": {}
    },
    {
        "label": "demucs.separate",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "demucs.separate",
        "description": "demucs.separate",
        "detail": "demucs.separate",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.bin.jp",
        "description": "venv.bin.jp",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('expression')\n    parser.add_argument('-f', '--filename',\n                        help=('The filename containing the input data.  '\n                              'If a filename is not given then data is '\n                              'read from stdin.'))\n    parser.add_argument('--ast', action='store_true',\n                        help=('Pretty print the AST, do not search the data.'))\n    args = parser.parse_args()",
        "detail": "venv.bin.jp",
        "documentation": {}
    },
    {
        "label": "EntityBase",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class EntityBase:\n    def to_dict(self):\n        return asdict(self)\n    def __str__(self):\n        return json.dumps(self.to_dict())\n@dataclass\nclass Datatype:\n    name: str\n    sub_type_name: Optional[str] = None\n    def __init__(self, name: str, sub_type_name: Optional[str] = None):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Datatype",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Datatype:\n    name: str\n    sub_type_name: Optional[str] = None\n    def __init__(self, name: str, sub_type_name: Optional[str] = None):\n        self.name = name\n        self.sub_type_name = sub_type_name\n    def __eq__(self, __value: object) -> bool:\n        if isinstance(__value, Datatype):\n            if self.sub_type_name is None and __value.sub_type_name is None:\n                return self.name == __value.name",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ProcessCategoryDefinition",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class ProcessCategoryDefinition(EntityBase):\n    id: str\n@dataclass\nclass ProcessDefinition(EntityBase):\n    id: str\n    process_category_id: str\n    input_data_types: List[Datatype]\n    output_data_types: List[Datatype]\n    append_id_as_suffix: bool = False\n    def suffix(self, id: str) -> str:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ProcessDefinition",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class ProcessDefinition(EntityBase):\n    id: str\n    process_category_id: str\n    input_data_types: List[Datatype]\n    output_data_types: List[Datatype]\n    append_id_as_suffix: bool = False\n    def suffix(self, id: str) -> str:\n        return f\"{id}_{self.id}\" if self.append_id_as_suffix else f\"{self.process_category_id}_{self.id}\"\n@dataclass\nclass TransitionDefinition(EntityBase):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "TransitionDefinition",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class TransitionDefinition(EntityBase):\n    source_process_id: str\n    target_process_id: str\n    prerequisite_process_ids: List[str]\n    def __str__(self):\n        return f\"({self.source_process_id}->{self.target_process_id})\"\n@dataclass\nclass WorkflowDefinition(EntityBase):\n    id: str\n    start_process_id: str",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "WorkflowDefinition",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class WorkflowDefinition(EntityBase):\n    id: str\n    start_process_id: str\n# @dataclass\n# class WorkflowConfiguration(EntityBase):\n#     id: str\n#     workflow_id: str\n#     force_all: bool\n# @dataclass\n# class WorkflowProcessConfiguration(EntityBase):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "FileDetail",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class FileDetail:\n    location: str\n    key: str\n    def to_dict(self):\n        return asdict(self)\n@dataclass\nclass SongInfo:\n    title: str\n    artist: str\n    def to_dict(self):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "SongInfo",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class SongInfo:\n    title: str\n    artist: str\n    def to_dict(self):\n        return asdict(self)\n@dataclass\nclass ProcessRecord:\n    process_id: str\n    started_at: str  # ISO8601\n    finished_at: str  # ISO8601",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ProcessRecord",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class ProcessRecord:\n    process_id: str\n    started_at: str  # ISO8601\n    finished_at: str  # ISO8601\n    elapsed_secs: float  # seconds\n    error: Optional[str] = None\n    def to_dict(self):\n        return asdict(self)\n@dataclass\nclass MetaInfo:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "MetaInfo",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class MetaInfo:\n    id: str\n    song_info: Optional[SongInfo]\n    file_details: List[FileDetail]\n    process_records: List[ProcessRecord]\n    discarded_reason: Optional[str] = None\n    @staticmethod\n    def default(id: str):\n        return MetaInfo(\n            id=id,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "MetaInfoWriter",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class MetaInfoWriter:\n    def __init__(self, id: str, json_file_path: str):\n        self.id = id\n        self.json_file_path = json_file_path\n    def _load_json(self):\n        try:\n            # check if file exists\n            if not os.path.exists(self.json_file_path):\n                return MetaInfo.default(self.id).to_dict()\n            with open(self.json_file_path, \"r\") as f:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "FileSaver",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class FileSaver(ABC):\n    @abstractmethod\n    def save_from_local_path(self, local_path: str) -> FileDetail:\n        pass\n    @abstractmethod\n    def save_from_string(self, string: str) -> FileDetail:\n        pass\n    @abstractmethod\n    def save_from_ndarray(self, ndarray: np.ndarray) -> FileDetail:\n        pass",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "LocalFileSaver",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class LocalFileSaver(FileSaver):\n    def __init__(self, base_dir_path: str, file_key: str):\n        self.location = 'local'\n        self.base_dir_path = base_dir_path\n        self.file_key = file_key\n        self.file_path = f\"{self.base_dir_path}/{self.file_key}\"\n    def save_from_local_path(self, local_path: str) -> FileDetail:\n        # Copy file to base dir\n        try:\n            subprocess.run(",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ProcessRunner",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class ProcessRunner(ABC):\n    @abstractmethod\n    def run(self, file_savers: List[FileSaver], inputs: List[Any]) -> Optional[FileDetail]:\n        pass\nclass DownloadYoutubeProcessRunner(ProcessRunner):\n    def __init__(self, temp_dir_path: str, base_dir_path: str, meta_info_writer: MetaInfoWriter):\n        self.temp_dir_path = temp_dir_path\n        self.base_dir_path = base_dir_path\n        self.meta_info_writer = meta_info_writer\n        # Run below on your local and paste the output",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "DownloadYoutubeProcessRunner",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class DownloadYoutubeProcessRunner(ProcessRunner):\n    def __init__(self, temp_dir_path: str, base_dir_path: str, meta_info_writer: MetaInfoWriter):\n        self.temp_dir_path = temp_dir_path\n        self.base_dir_path = base_dir_path\n        self.meta_info_writer = meta_info_writer\n        # Run below on your local and paste the output\n        # !ytmusicapi oauth\n        with open('/tmp/youtube-oauth.json', 'w') as file:\n            file.write('{\"access_token\": \"ya29.a0AfB_byARMFsW2o9zMfN8QVvtaH1A7qUntxHtsVK37V57dwq_eD4L-DKUNxe5OrqRCHJLfMRedyjn_u0Gfx9F6l3z7vPBvfvlJ1AFHF0y7BzPLkauSd3jB_92zi6QLKkoNcq1C6_fe-3qfwCxDK1qUp7JzWRmJqzD8Vkm-OIpJ-Y7VBSNaCgYKATwSARASFQHGX2MiSqq-nWZvNsIJM4HNY0OmLw0183\", \"expires_in\": 64238, \"refresh_token\": \"1//0eWOvEBrb84fjCgYIARAAGA4SNwF-L9IrkaKX15-wybnc6tX48PnpD3DlhTbFFi-FipgYrC5g4g3l2HG2hDUVa9oVDLey56p61cg\", \"scope\": \"https://www.googleapis.com/auth/youtube\", \"token_type\": \"Bearer\", \"expires_at\": 1699735372}')\n        self.ytmusic = YTMusic(\"/tmp/youtube-oauth.json\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "DescribeAttributesProcessRunner",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class DescribeAttributesProcessRunner(ProcessRunner):\n    def __init__(self, temp_dir_path: str, base_dir_path: str):\n        self.temp_dir_path = temp_dir_path\n        self.base_dir_path = base_dir_path\n    def run(self, file_savers: List[FileSaver], inputs: List[FileDetail]) -> FileDetail:\n        wav_file = inputs[0]\n        wav_file_path = f\"{self.base_dir_path}/{wav_file.key}\"\n        try:\n            audio = es.MonoLoader(filename=wav_file_path).compute()\n            key_extractor = es.KeyExtractor()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "CutoutChorusProcessRunner",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class CutoutChorusProcessRunner(ProcessRunner):\n    def __init__(self, temp_dir_path: str, base_dir_path: str):\n        self.temp_dir_path = temp_dir_path\n        self.base_dir_path = base_dir_path\n    def run(self, file_savers: List[FileSaver], inputs: List[FileDetail]) -> FileDetail:\n        wav_file = inputs[0]\n        wav_file_path = f\"{self.base_dir_path}/{wav_file.key}\"\n        temp_file_path = f\"{self.temp_dir_path}/chorus-{wav_file.key}\"\n        try:\n            pychorus.find_and_output_chorus(wav_file_path, temp_file_path)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "NormalizeKeyToCProcessRunner",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class NormalizeKeyToCProcessRunner(ProcessRunner):\n    def __init__(self, temp_dir_path: str, base_dir_path: str):\n        self.temp_dir_path = temp_dir_path\n        self.base_dir_path = base_dir_path\n    def run(self, file_savers: List[FileSaver], inputs: List[FileDetail]) -> FileDetail:\n        wav_file = inputs[0]\n        wav_file_path = f\"{self.base_dir_path}/{wav_file.key}\"\n        temp_file_path = f\"{self.temp_dir_path}/keytoc-{wav_file.key}\"\n        try:\n            y, sr = librosa.load(wav_file_path, sr=None)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "NormalizeTempoTo120ProcessRunner",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class NormalizeTempoTo120ProcessRunner(ProcessRunner):\n    def __init__(self, temp_dir_path: str, base_dir_path: str):\n        self.temp_dir_path = temp_dir_path\n        self.base_dir_path = base_dir_path\n    def run(self, file_savers: List[FileSaver], inputs: List[FileDetail]) -> FileDetail:\n        wav_file = inputs[0]\n        wav_file_path = f\"{self.base_dir_path}/{wav_file.key}\"\n        temp_file_path = f\"{self.temp_dir_path}/tempoto120-{wav_file.key}\"\n        try:\n            sr = 44100",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "TrackSeparationVocalProcessRunner",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class TrackSeparationVocalProcessRunner(ProcessRunner):\n    def __init__(self, temp_dir_path: str, base_dir_path: str):\n        self.temp_dir_path = temp_dir_path\n        self.base_dir_path = base_dir_path\n    def run(self, file_savers: List[FileSaver], inputs: List[FileDetail]) -> FileDetail:\n        wav_file = inputs[0]\n        wav_file_path = f\"{self.base_dir_path}/{wav_file.key}\"\n        filename = os.path.splitext(os.path.basename(wav_file.key))[0]\n        temp_file_path = os.path.join(\n            self.temp_dir_path, \"mdx_extra\", filename, f\"vocals.wav\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "PreparationCropProcessRunner",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class PreparationCropProcessRunner(ProcessRunner):\n    def __init__(self, temp_dir_path: str, base_dir_path: str):\n        self.temp_dir_path = temp_dir_path\n        self.base_dir_path = base_dir_path\n    def run(self, file_savers: List[FileSaver], inputs: List[FileDetail]) -> FileDetail:\n        wav_file = inputs[0]\n        wav_file_path = f\"{self.base_dir_path}/{wav_file.key}\"\n        y, sr = librosa.load(wav_file_path, sr=None)\n        desired_duration = 5  # seconds\n        desired_length = int(desired_duration * sr)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "FeatureExtractionMelspectrogramProcessRunner",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class FeatureExtractionMelspectrogramProcessRunner(ProcessRunner):\n    def __init__(self, temp_dir_path: str, base_dir_path: str):\n        self.temp_dir_path = temp_dir_path\n        self.base_dir_path = base_dir_path\n    def run(self, file_savers: List[FileSaver], inputs: List[FileDetail]) -> FileDetail:\n        wav_file = inputs[0]\n        wav_file_path = f\"{self.base_dir_path}/{wav_file.key}\"\n        try:\n            y, sr = librosa.load(wav_file_path, sr=None)\n            S = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=128)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "FeatureExtractionChromagramProcessRunner",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class FeatureExtractionChromagramProcessRunner(ProcessRunner):\n    def __init__(self, temp_dir_path: str, base_dir_path: str):\n        self.temp_dir_path = temp_dir_path\n        self.base_dir_path = base_dir_path\n    def run(self, file_savers: List[FileSaver], inputs: List[FileDetail]) -> FileDetail:\n        wav_file = inputs[0]\n        wav_file_path = f\"{self.base_dir_path}/{wav_file.key}\"\n        try:\n            y, sr = librosa.load(wav_file_path, sr=None)\n            chroma = librosa.feature.chroma_stft(y=y, sr=sr)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "FeatureExtractionMfccProcessRunner",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class FeatureExtractionMfccProcessRunner(ProcessRunner):\n    def __init__(self, temp_dir_path: str, base_dir_path: str):\n        self.temp_dir_path = temp_dir_path\n        self.base_dir_path = base_dir_path\n    def run(self, file_savers: List[FileSaver], inputs: List[FileDetail]) -> FileDetail:\n        wav_file = inputs[0]\n        wav_file_path = f\"{self.base_dir_path}/{wav_file.key}\"\n        try:\n            y, sr = librosa.load(wav_file_path, sr=None)\n            mfcc = librosa.feature.mfcc(y=y, sr=sr)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "check_no_cycles",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def check_no_cycles(start_process_id, transitions) -> bool:\n    def dfs(current_process_id, visited):\n        if current_process_id in visited:\n            return False\n        visited.add(current_process_id)\n        next_processes = [\n            t.target_process_id for t in transitions if t.source_process_id == current_process_id]\n        for next_id in next_processes:\n            if not dfs(next_id, visited):\n                return False",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "check_transition_data_types",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def check_transition_data_types(transitions, processes) -> Optional[str]:\n    for transition in transitions:\n        try:\n            source_process = processes[transition.source_process_id]\n        except KeyError:\n            return f\"Transition {transition} is invalid. Source process {transition.source_process_id} is not found.\"\n        try:\n            target_process = processes[transition.target_process_id]\n        except KeyError:\n            return f\"Transition {transition} is invalid. Target process {transition.target_process_id} is not found.\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "check_workflow_validity",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def check_workflow_validity(start_process_id, processes, transitions) -> Optional[str]:\n    if not check_no_cycles(start_process_id, transitions):\n        return \"Workflow has cycles.\"\n    return check_transition_data_types(transitions, processes)\ndef generate_mermaid_diagram(\n    workflow_definition: WorkflowDefinition,\n    process_category_definitions: List[ProcessCategoryDefinition],\n    process_definitions: List[ProcessDefinition],\n    transition_definitions: List[TransitionDefinition]\n) -> str:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "generate_mermaid_diagram",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def generate_mermaid_diagram(\n    workflow_definition: WorkflowDefinition,\n    process_category_definitions: List[ProcessCategoryDefinition],\n    process_definitions: List[ProcessDefinition],\n    transition_definitions: List[TransitionDefinition]\n) -> str:\n    mermaid_str = \"graph LR\\n\"\n    # カテゴリごとにサブグラフを作成\n    for category in process_category_definitions:\n        mermaid_str += f\"    subgraph {category.id}\\n\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    workflow_definition = WorkflowDefinition(\n        id=\"workflow\",\n        start_process_id=\"youtube\"\n    )\n    process_category_definitions = [\n        ProcessCategoryDefinition(\n            id=\"download\",\n        ),\n        ProcessCategoryDefinition(",
        "detail": "main",
        "documentation": {}
    }
]